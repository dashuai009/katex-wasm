#!/usr/bin/env python3

import sys
import json

props = ['depth', 'height', 'italic', 'skew']

if len(sys.argv) > 1:
    if sys.argv[1] == '--width':
        props.append('width')


data = json.load(sys.stdin)
sys.stdout.write(
  "// This file is GENERATED by dockers/fonts/buildMetrics.sh. DO NOT MODIFY.\n")
sys.stdout.write("use crate::metrics::{make_metric_map,CharacterMetrics};\n")
sys.stdout.write("use std::collections::HashMap;\n")
sys.stdout.write("lazy_static! {\n")


for font in sorted(data):
    sys.stdout.write(f"    static ref {font.replace('-','_')}_map: HashMap<String, CharacterMetrics> = {{\n")
    sys.stdout.write("        return make_metric_map!{\n")
    sep = ""
    for glyph in sorted(data[font], key=int):
        #sys.stdout.write(sep +(" " * 12) +json.dumps(glyph) + ": ")

        values = [value if value != 0.0 else 0 for value in
                  [data[font][glyph][key] for key in props]]

        #sys.stdout.write(json.dumps(values))
        sep = ",\n"
    sys.stdout.write("\n        }\n    };\n")



sys.stdout.write("\n}\n")




sys.stdout.write("pub fn get_char_metrics(font:String,character:String)->CharacterMetrics{\n")
sys.stdout.write("    match font.as_str(){\n")
for font in sorted(data):
    sys.stdout.write(f"        \"{font}\" => {font.replace('-','_')}_map.get(&character).unwrap().clone(),\n")

sys.stdout.write("        _ => CharacterMetrics::default()\n    }\n}")

